import { updatePosts, loadMore, getLatestPosts } from '@firebase/client'
import { HeaderMobile } from 'components/Utils/HeaderMobile'
import { NavBarMobile } from 'components/Utils/NavBarMobile'
import { PostCard } from 'components/Posts/PostCard'
import { useAuth } from 'context/authUserContext'
import Head from 'next/head'
import { SyntheticEvent, useEffect, useRef, useState } from 'react'
import { PostCollection } from 'types/databaseTypes'
import { SideBarContainer } from 'components/SideBars/SideBarContainer'
import { DocumentData, QueryDocumentSnapshot } from 'firebase/firestore'
import { Spinner } from 'flowbite-react'
import { NavBarDesktop } from 'components/Utils/NavBarDesktop'
import { CreatePostModal } from 'components/Modal/CreatePostModal'
import { SideMenuDesktop } from 'components/SideBars/SideMenuDesktop'

export default function Home () {
  const [search, setSearch] = useState('')
  const [posts, setPosts] = useState<PostCollection[]>([])
  const [upcomingPosts, setUpcomingPosts] = useState<PostCollection[]>([])
  const [lastPost, setLastPost] = useState<QueryDocumentSnapshot<DocumentData>>()
  const [isSincronized, setIsSincronized] = useState(true)
  const [loading, setLoading] = useState(false)
  const [showModal, setShowModal] = useState(false)
  const listRef = useRef<HTMLElement>(null)
  const auth = useAuth()

  useEffect(() => {
    setLoading(true)
    if (auth.authUser) {
      getLatestPosts().then(({ lastPost, newPosts }) => {
        setPosts(newPosts)
        setLastPost(lastPost)
        setLoading(false)
        setIsSincronized(true)
      })
      const unsub = updatePosts(setUpcomingPosts)
      return () => unsub && unsub()
    }
  }, [auth.authUser])

  useEffect(() => {
    if (upcomingPosts[0]?.id !== posts[0]?.id || upcomingPosts.length !== posts.length) {
      setIsSincronized(false)
    }
  }, [upcomingPosts])

  const handleScroll = (e: SyntheticEvent) => {
    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget
    listRef.current?.focus()

    if (scrollTop + clientHeight >= scrollHeight && !loading) {
      setLoading(true)
      lastPost && loadMore(lastPost).then(({ lastPost, newPosts }) => {
        setLastPost(lastPost)
        setPosts(prev => [...prev, ...newPosts])
        setLoading(false)
      })
    }
  }

  const handleUpdatePosts = () => {
    setPosts(upcomingPosts)
    setIsSincronized(true)
    listRef.current?.scrollTo(0, 0)
  }

  return (
    <>
      <Head>
        <title>Connet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="logo_ico.ico" />
      </Head>
      <SideBarContainer />
      <NavBarDesktop setSearch={setSearch} search={search}/>
      <HeaderMobile search={search} setSearch={setSearch}/>
      <main className='relative w-full h-screen md:grid grid-cols-8 gap-4 justify-center max-w-5xl mx-auto'>
        <SideMenuDesktop/>
        <section className='flex flex-col md:col-span-5 gap-4 h-screen overflow-scroll no-scrollbar pb-60 items-center md:mt-16 relative' onScroll={handleScroll} ref={listRef}>
          <button onClick={() => setShowModal(true)} className='w-3/5 bg-dark-green text-ligth-text-green rounded-full hidden md:block font-concert-one pb-2 hover:opacity-80 transition-opacity'>Create post</button>

          {
            !isSincronized && <button className='fixed md:sticky z-20 bg-dark-green rounded-lg text-ligth-text-green font-concert-one px-2 py-1 w-2/4 left-1/2 transform -translate-x-1/2 top-28 sm:w-1/4 md:top-0 md:pb-3 hover:opacity-80 transition-opacity' onClick={handleUpdatePosts}>Update</button>
          }

          {
            posts && posts.map(post => {
              if (post.content?.toLowerCase().includes(search)) {
                return <PostCard
                post={post}
                key={post.id}
                />
              }
              return undefined
            })
          }

          {
            loading && <Spinner color={'gray'}/>
          }

        </section>

      </main>

      <CreatePostModal setShowModal={setShowModal} showModal={showModal}/>
      <NavBarMobile />
    </>
  )
}
